{
  "_args": [
    [
      "unity-editor-home.0.1.35.tgz",
      "C:\\Users\\chs\\AppData\\Roaming\\Unity\\Packages"
    ]
  ],
  "_from": "unity-editor-home.0.1.35.tgz",
  "_id": "unity-editor-home@0.1.35",
  "_inCache": true,
  "_location": "/unity-editor-home",
  "_phantomChildren": {},
  "_requested": {
    "name": null,
    "raw": "unity-editor-home.0.1.35.tgz",
    "rawSpec": "unity-editor-home.0.1.35.tgz",
    "scope": null,
    "spec": "C:\\Users\\chs\\AppData\\Roaming\\Unity\\Packages\\unity-editor-home.0.1.35.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "file:unity-editor-home.0.1.35.tgz",
  "_shasum": "bb11e1a28c8cf03f05f134ada238f6f6265f7d49",
  "_shrinkwrap": null,
  "_spec": "unity-editor-home.0.1.35.tgz",
  "_where": "C:\\Users\\chs\\AppData\\Roaming\\Unity\\Packages",
  "author": {
    "name": "Paolo Gavazzi - Unity"
  },
  "dependencies": {},
  "description": "Unity's Home Window.  based on [unityeditor-cloud-starter](https://github.com/UnityTech/unityeditor-cloud-starter)",
  "devDependencies": {
    "coveralls": "^2.11.4",
    "frisby": "^0.8.5",
    "grunt": "~0.4.5",
    "grunt-angular-gettext": "~2.1.3",
    "grunt-bower-task": "^0.4.0",
    "grunt-bump": "~0.3.1",
    "grunt-concat-sourcemap": "~0.4.3",
    "grunt-contrib-clean": "~0.6.0",
    "grunt-contrib-concat": "~0.5.1",
    "grunt-contrib-copy": "~0.8.0",
    "grunt-contrib-jshint": "~0.11.2",
    "grunt-contrib-less": "~1.0.1",
    "grunt-contrib-uglify": "~0.9.1",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-conventional-changelog": "~1.2.2",
    "grunt-html2js": "~0.3.2",
    "grunt-istanbul": "^0.6.1",
    "grunt-karma": "^0.11.0",
    "grunt-karma-coveralls": "^2.5.4",
    "grunt-ng-annotate": "~1.0.1",
    "grunt-themes": "git+ssh://git@github.com/UnityTech/grunt-themes.git",
    "jasmine-core": "~2.3.4",
    "karma": "^0.12.37",
    "karma-chrome-launcher": "~0.1.12",
    "karma-coverage": "^0.5.3",
    "karma-firefox-launcher": "~0.1.6",
    "karma-jasmine": "~0.3.5",
    "karma-ng-scenario": "~0.1.0",
    "karma-phantomjs-launcher": "^0.2.1",
    "karma-spec-reporter": "0.0.19",
    "phantomjs": "^1.9.18"
  },
  "files": [
    "dist"
  ],
  "installable": true,
  "licenses": {
    "type": "MIT",
    "url": "https://raw.github.com/UnityTech/unityeditor-launcher/master/LICENSE"
  },
  "name": "unity-editor-home",
  "optionalDependencies": {},
  "readme": "# unityeditor-launcher [![Build Status](https://magnum.travis-ci.com/UnityTech/unityeditor-launcher.svg?token=rsGNoUBdJ2xNNMbKPntd)](https://magnum.travis-ci.com/UnityTech/unityeditor-launcher) [![Coverage Status](https://coveralls.io/repos/UnityTech/unityeditor-launcher/badge.svg?branch=dev&service=github&t=oZG9hg)](https://coveralls.io/github/UnityTech/unityeditor-launcher?branch=dev)\n\nUnity's Home Window.  based on [unityeditor-cloud-starter](https://github.com/UnityTech/unityeditor-cloud-starter)\n\n## Owner ##\n\nPaolo Gavazzi (paolo@unity3d.com)\n\n## Quick Start\n\n#### Installation\n\n```sh\n# Clone the repository\n$ git clone git@github.com:UnityTech/unityeditor-launcher.git\n\n# Make Sure you have the latest bower/npm\n$ sudo npm cache clean\n$ npm update -g bower\n$ sudo npm install -g npm\n\n# Install global dependencies\n$ sudo npm -g install grunt-cli karma bower\n\n$ cd unityeditor-launcher\n\n$ npm install\n$ bower install\n$ grunt\n```\n\nThe last grunt command will start a copy the required files in the dist folder and can be use for development purpose.  \n\n#### Running Tests\n\n```sh\n$ grunt test\n# This will generate a code coverage report. Instructions on viewing it are displayed in the result text.\n```\n\n#### Unity Javascript Package Repository\n\nUnity now uses {UserData}/Packages/package.json to specify the required javascript packages\n\n#### Using npm link to develop Home Window features\n\n```sh\n$ cd unityeditor-launcher\n\n# this will register your current project folder as the location of the unity-editor-home location\n$ npm link\n\n$ cd {UserData}/Packages\n\n# this creates a symbolic link to your dev folder for the unity-editor-home package\n$ npm link unity-editor-home\n\n$ grunt build    # to build ALL files\n$ grunt watch    # to continuously update changes\n```\n\n<img src=\"wiki/package-load-flow.png\" alt=\"Load Flow\" style=\"max-width: 400px;\"/>\n\n#### Pull Request approval process\n\nIn order to be accepted, your PR to the \"dev\" branch must go through the same approval process as code that's commited to our Mercurial editor/collab/staging branch. Here are the steps to follow:\n\n###### A. Prerequisites\n0. Setup for checking out/committing to the Mercurial Unity repository: https://confluence.hq.unity3d.com/display/DEV/Development+Setup\n0. Get access to our MyGet npm packages repository (ask @pgavazzi)\n\n##### Create Pull Requests in both repositories\n\n###### B. Create Pull Request in the unityeditor-launcher git repo:\n0. Before submitting your PR, increment the version field in the package.json of each modified package to a prerelease version. The current convention to avoid overwriting other people's packages is to append the branch name as a prerelease tag.\n    - For instance, if the current version is {\"version\": \"0.0.16\"} and your branch name is `my_awesome_fix`, update the version to {\"version\": \"0.0.17-my_awesome_fix.1\"}.\n    - Version strings must be parseable by https://github.com/npm/node-semver.\n0. Submit your PR. Travis will automatically publish packages that have a prerelease version to MyGet, and will skip publishing packages with release versions (it will still build them for verification purposes).\n0. Add reviewers by mentioning them with @name in the description or a comment, including QA.\n    - To make the notification emails stand out, it's highly recommended to cut down on the github spam by unwatching every repository and setting \"Automatically watch repositories \" to off in the Notification center. You'll still be notified when participating or @mentioned.\n0. Download your prerelease packages from MyGet.\n\n###### C. Create Pull Request in the unity mercurial repo:\n0. Prepare a PR branch off editor/collab/staging. Copy the packages downloaded from MyGet into External/Packages, deleting older packages. Add the packages to mercurial as *largefiles* (`hg add --large`)\n    - you can configure the largefiles extension to automatically consider .tgz as largefiles: https://www.mercurial-scm.org/wiki/LargefilesExtension#Overview.\n0. Update External/Packages/package.json to depend on your new packages. For instance, if your package is `unityeditor-launcher.0.0.17-my_awesome_fix.1.tgz`, set {\"unityeditor-launcher\": \"~0.0.17-my_awesome_fix.1\"} in package.json.\n    - For more info about npm's semantic versioning i.e. how npm actually matches what you put in package.json to ranges of package versions, see http://semver.npmjs.com/.\n0. Push your branch and submit your PR on Ono. Ensure you follow all verification steps on your end, i.e. build, run all native tests, test likely affected areas in the editor, run the RAT, start Windows/Mac Editor Katana builds. Bring on reviewers and QA.\n    - If you have used \"npm link\" to point the Unity editor to your javascript source, you need to delete those symlinks before launching Unity, or it won't install the packages you just produced.\n\nIf you need to update your PR, repeat the steps above as needed. You can choose to keep the same version number, which will overwrite your dev package on MyGet and save space, or increment it to generate new packages: `0.0.17-my_awesome_fix.2`, `0.0.17-my_awesome_fix.3`, and so on.\n\n##### Final steps once both PRs are approved\n\nFor the merge to the git \"dev\" branch and the mercurial \"editor/collab/staging\" branch, your packages must be set back to release versions:\n\n###### D. Produce release packages\n\n0. *Ensure your git feature branch is up-to-date with the \"dev\" branch, or the version won't be updated correctly.* If not up-to-date, merge \"dev\" into your branch.\n    - rebasing isn't advised at this point since for traceability, we don't want to lose the commit the tested packages came from.\n0. Bump the version of each modified project by using `npm version patch` in their folder. The correct folder is the one containing the package.json.\n    - `npm version patch` will bump `0.0.16 -> 0.0.17` and `0.0.17-my_awesome_fix.1 -> 0.0.17`\n    - ensure that the result is that you're one patch version above the latest version used in \"dev\".\n    - Note that **doesn't currently apply** to unityeditor-launcher: for packages that have their dedicated repo, `npm version` will automatically commit to your current branch and `git tag` the revision. In that case, in addition to pushing your commits, push the version tag using `git push origin <tag_name>` (info on pushing tags: http://stackoverflow.com/questions/5195859/push-a-tag-to-a-remote-repository-using-git)\n0. Update your GitHub PR and merge to \"dev\" branch.\n    - The comment for the merge commit should be the URL of the pull request.\n0. Travis will pick up your merge commit in the \"dev\" branch and upload new packages to MyGet. (Our Travis scripts will block release packages from being overwritten, so packages whose version did not change won't be reuploaded.)\n\n###### E. Commit release packages\n\n0. Download the release packages, commit them (as largefiles) to External/Packages in your Mercurial PR branch, replacing your prerelease ones. Update External/Packages/package.json accordingly to match the new version of your packages: `unityeditor-launcher.0.0.17.tgz` would require {\"unityeditor-launcher\": \"~0.0.17\"}.\n0. Merge your PR branch to editor/collab/staging. Before pushing, ensure you build, run native tests, and ensure the editor can open a project. An additional sanity check is also recommended to ensure that the packages you're adding are the same (except for the version) as the prerelease ones you got tested by QA.\n    - The comment for the merge commit should be the URL of the pull request.\n\n#### Additional Information\n\nsee [unityeditor-cloud-starter readme](https://github.com/UnityTech/unityeditor-cloud-starter/blob/trunk/README.md) for more details on the stucture of the project.\n\nHappy hacking!\n",
  "readmeFilename": "README.md",
  "version": "0.1.35"
}
